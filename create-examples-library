#!/bin/zsh
#
# Script to make a library of models to be served.
#
# The script will:
#
# 1. Search for `*.poieticframe` source files in `FRAMES_PATH` (default: `../PoieticExamples`)
# 2. Creates a design file for each frame.
# 3. Creates a library `poietic-library.json` in current directory.
#
# Requires: poietic tool from PoieticFlows to be available in PATH.
#
# Usage:
#
# ./create-examples-library
#
# With explicit path:
#
# ./create-examples-library [FRAMES_PATH]
#

set -e

# -----------------------------------------------------------------------------------
# Some internal config, you might skip this to the next section ...

# Path to the poietic tool.
#
POIETIC="${POIETIC:-poietic}"

# Path to the output directory, default ./out
OUTPUT_DIR="${OUTPUT:-./ModelLibrary}"
FRAMES_PATH="${1:-../PoieticExamples}"

if ! command -v ${POIETIC} &> /dev/null
then
    echo "ERROR: Command 'poietic' not found." 1>&2
    echo "HINT: Follow the installation instructions in the PoieticTool package" 1>&2
    echo "HINT: Get the tool at https://github.com/OpenPoiesis/PoieticTool" 1>&2
    echo "HINT: Make sure you have '~/.swiftpm/bin' in your PATH." 1>&2
	exit 1
fi


echo "Creating ${OUTPUT_DIR}"
mkdir -p "${OUTPUT_DIR}"

all_frames=($(find $FRAMES_PATH -name '*.poieticframe' ))

for frame_path in ${all_frames[*]}; do
    frame_name=$(basename -- $frame_path)
    frame_name=${frame_name%.*}

    export POIETIC_DESIGN="$OUTPUT_DIR/${frame_name}.poietic"
    echo "Processing frame ${frame_name}"
    $POIETIC new --import $frame_path
    $POIETIC edit auto-parameters
done

# FINALLY: Create the library!
#
echo "Creating library..."
poietic create-library $OUTPUT_DIR/*.poietic
